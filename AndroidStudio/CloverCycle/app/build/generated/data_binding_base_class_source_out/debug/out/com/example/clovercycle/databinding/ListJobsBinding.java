// Generated by view binder compiler. Do not edit!
package com.example.clovercycle.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.clovercycle.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ListJobsBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final TextView addressLabelTv;

  @NonNull
  public final TextView addressTv;

  @NonNull
  public final TextView amountLabelTv;

  @NonNull
  public final TextView amountTV;

  @NonNull
  public final RecyclerView idRVJobs;

  @NonNull
  public final TextView nameLabelTv;

  @NonNull
  public final TextView nameTv;

  private ListJobsBinding(@NonNull LinearLayout rootView, @NonNull TextView addressLabelTv,
      @NonNull TextView addressTv, @NonNull TextView amountLabelTv, @NonNull TextView amountTV,
      @NonNull RecyclerView idRVJobs, @NonNull TextView nameLabelTv, @NonNull TextView nameTv) {
    this.rootView = rootView;
    this.addressLabelTv = addressLabelTv;
    this.addressTv = addressTv;
    this.amountLabelTv = amountLabelTv;
    this.amountTV = amountTV;
    this.idRVJobs = idRVJobs;
    this.nameLabelTv = nameLabelTv;
    this.nameTv = nameTv;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListJobsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListJobsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_jobs, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListJobsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.addressLabelTv;
      TextView addressLabelTv = ViewBindings.findChildViewById(rootView, id);
      if (addressLabelTv == null) {
        break missingId;
      }

      id = R.id.addressTv;
      TextView addressTv = ViewBindings.findChildViewById(rootView, id);
      if (addressTv == null) {
        break missingId;
      }

      id = R.id.amountLabelTv;
      TextView amountLabelTv = ViewBindings.findChildViewById(rootView, id);
      if (amountLabelTv == null) {
        break missingId;
      }

      id = R.id.amountTV;
      TextView amountTV = ViewBindings.findChildViewById(rootView, id);
      if (amountTV == null) {
        break missingId;
      }

      id = R.id.idRVJobs;
      RecyclerView idRVJobs = ViewBindings.findChildViewById(rootView, id);
      if (idRVJobs == null) {
        break missingId;
      }

      id = R.id.nameLabelTv;
      TextView nameLabelTv = ViewBindings.findChildViewById(rootView, id);
      if (nameLabelTv == null) {
        break missingId;
      }

      id = R.id.nameTv;
      TextView nameTv = ViewBindings.findChildViewById(rootView, id);
      if (nameTv == null) {
        break missingId;
      }

      return new ListJobsBinding((LinearLayout) rootView, addressLabelTv, addressTv, amountLabelTv,
          amountTV, idRVJobs, nameLabelTv, nameTv);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
